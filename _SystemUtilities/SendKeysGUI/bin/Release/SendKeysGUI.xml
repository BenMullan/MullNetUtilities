<?xml version="1.0"?>
<doc>
<assembly>
<name>
SendKeysGUI
</name>
</assembly>
<members>
<member name="T:SendKeysGUI.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:SendKeysGUI.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:SendKeysGUI.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:SendKeysGUI.My.Resources.Resources.ExpansionsHTML">
<summary>
  Looks up a localized string similar to &lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Expansions HTML&lt;/title&gt;
		&lt;style&gt;
			body { padding: 1% 3% 1% 3%; color: #454545; background-color: #EDFEFF; font-family: verdana; }
			table, th, td { border: 1px solid black; }
		&lt;/style&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;center&gt;
			&lt;h1&gt;SendKeys Examples&lt;/h1&gt;
		&lt;/center&gt;
		
			&lt;p&gt;
				&lt;ul&gt;
					&lt;li&gt;Hello World&lt;/li&gt;
					&lt;li&gt;{Enter}&lt;/li&gt;
					&lt;li&gt;{F5}&lt;/li&gt;
					&lt;li&gt;^{v}&amp;emsp;&lt;b&gt;Ctrl + V&lt;/b&gt;&lt;/li&gt;
					&lt;li&gt;^+{F1}&amp;emsp;&lt;b&gt;Ctrl + Shift + F1&lt;/b&gt;&lt;/li&gt;
					&lt;li&gt;+(EC)&amp;emsp;&lt;b&gt;Holds do [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:SendKeysGUI.My.Resources.Resources.ProcExp_WindowSelection_TargetIcon">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="M:SendKeysGUI.OpenWindowGetter.SetForegroundWindow(System.IntPtr)">
 <summary>
     Brings the thread that created the specified window into the foreground and activates the window. Keyboard input is
     directed to the window, and various visual cues are changed for the user. The system assigns a slightly higher
     priority to the thread that created the foreground window than it does to other threads.
     <para>See for https://msdn.microsoft.com/en-us/library/windows/desktop/ms633539%28v=vs.85%29.aspx more information.</para>
  </summary>
 <param name="hWnd">
     C++ ( hWnd [in]. Type: HWND )<br />A handle to the window that should be activated and brought to the foreground.
 </param>
 <returns>
     <c>true</c> or nonzero if the window was brought to the foreground, <c>false</c> or zero If the window was not
     brought to the foreground.
 </returns>
 <remarks>
     The system restricts which processes can set the foreground window. A process can set the foreground window only if
     one of the following conditions is true:
     <list type="bullet">
     <listheader>
         <term>Conditions</term><description></description>
     </listheader>
     <item>The process is the foreground process.</item>
     <item>The process was started by the foreground process.</item>
     <item>The process received the last input event.</item>
     <item>There is no foreground process.</item>
     <item>The process is being debugged.</item>
     <item>The foreground process is not a Modern Application or the Start Screen.</item>
     <item>The foreground is not locked (see LockSetForegroundWindow).</item>
     <item>The foreground lock time-out has expired (see SPI_GETFOREGROUNDLOCKTIMEOUT in SystemParametersInfo).</item>
     <item>No menus are active.</item>
     </list>
     <para>
     An application cannot force a window to the foreground while the user is working with another window.
     Instead, Windows flashes the taskbar button of the window to notify the user.
     </para>
     <para>
     A process that can set the foreground window can enable another process to set the foreground window by
     calling the AllowSetForegroundWindow function. The process specified by dwProcessId loses the ability to set
     the foreground window the next time the user generates input, unless the input is directed at that process, or
     the next time a process calls AllowSetForegroundWindow, unless that process is specified.
     </para>
     <para>
     The foreground process can disable calls to SetForegroundWindow by calling the LockSetForegroundWindow
     function.
     </para>
 </remarks>
</member>
<member name="M:SendKeysGUI.OverlayTimerWindow.ShowNew(System.UInt16,System.String,System.String)">
 <summary>
 Returns once a New instance of the Window has been shown for _SecondsToShowFor
 </summary>
 <param name="_SecondsToShowFor">E.g. 3</param>
 <param name="_InstructionMessage">E.g. "Position the Mouse over the Target Window"</param>
 <param name="_ActionAfterTimeMessage">E.g. "Capturing MousePosition in..."</param>
</member>
</members>
</doc>
